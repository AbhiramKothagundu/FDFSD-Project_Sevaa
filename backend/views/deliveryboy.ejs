<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Add Delivery Boy</title>
</head>
<body>
    <h1>Add Delivery Boy</h1>

    <form id="deliveryBoyForm">
        <!-- Delivery Boy Name -->
        <label for="deliveryBoyName">Delivery Boy Name:</label><br>
        <input type="text" id="deliveryBoyName" name="deliveryBoyName" required><br><br>

        <!-- Mobile Number -->
        <label for="mobileNumber">Mobile Number:</label><br>
        <input type="tel" id="mobileNumber" name="mobileNumber" pattern="[0-9]{10}" required><br><br>

        <!-- Vehicle Number -->
        <label for="vehicleNo">Vehicle Number:</label><br>
        <input type="text" id="vehicleNo" name="vehicleNo" required><br><br>

        <!-- Driving License Number -->
        <label for="drivingLicenseNo">Driving License Number:</label><br>
        <input type="text" id="drivingLicenseNo" name="drivingLicenseNo" required><br><br>

        <!-- Coordinates -->
        <h3>Current Location (Coordinates)</h3>
        <label for="longitude">Longitude:</label><br>
        <input type="number" step="any" id="longitude" name="longitude" required><br><br>

        <label for="latitude">Latitude:</label><br>
        <input type="number" step="any" id="latitude" name="latitude" required><br><br>

        <!-- Submit Button -->
        <button type="submit">Add Delivery Boy</button>
    </form>

    <button id="getLocationButton">Get Current Location</button>

    <script>
        // Function to get the current location
        function getCurrentLocation() {
            if (navigator.geolocation) {
                navigator.geolocation.getCurrentPosition((position) => {
                    const latitude = position.coords.latitude;
                    const longitude = position.coords.longitude;

                    // Set the latitude and longitude inputs
                    document.getElementById('latitude').value = latitude;
                    document.getElementById('longitude').value = longitude;
                }, () => {
                    alert("Unable to retrieve your location.");
                });
            } else {
                alert("Geolocation is not supported by this browser.");
            }
        }

        // Add event listener to the button
        document.getElementById('getLocationButton').addEventListener('click', getCurrentLocation);

        document.getElementById('deliveryBoyForm').addEventListener('submit', async function (event) {
            event.preventDefault(); // Prevent form from submitting the default way

            const formData = {
                deliveryBoyName: document.getElementById('deliveryBoyName').value,
                mobileNumber: document.getElementById('mobileNumber').value,
                vehicleNo: document.getElementById('vehicleNo').value,
                drivingLicenseNo: document.getElementById('drivingLicenseNo').value,
                currentlocation: {
                    type: 'Point',
                    coordinates: [
                        parseFloat(document.getElementById('longitude').value),
                        parseFloat(document.getElementById('latitude').value)
                    ]
                }
            };

            try {
                // First, add the delivery boy
                const response = await fetch('http://localhost:9500/deliveryboy/addDeliveryboy', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(formData)
                });

                const data = await response.json();

                if (response.ok) {
                    // If successful, fetch nearby users
                    const deliveryBoyId = data.deliveryBoy._id; // Get the ID of the added delivery boy
                    const nearbyUsersResponse = await fetch(`http://localhost:9500/deliveryboy/deliveryboy/${deliveryBoyId}/nearby-users`);
                    const nearbyUsersData = await nearbyUsersResponse.json();

                    if (nearbyUsersResponse.ok) {
                        // Show nearby users in a popup or dropdown
                        showNearbyUsers(nearbyUsersData.users);
                    } else {
                        alert(`Failed to fetch nearby users: ${nearbyUsersData.message}`);
                    }
                } else {
                    alert(`Failed to add delivery boy: ${data.message}`);
                }
            } catch (error) {
                alert('Error submitting the form');
            }
        });

        function showNearbyUsers(users) {
            const userSelection = document.createElement('div');
            userSelection.innerHTML = '<h2>Select User to Work Under:</h2>';
            
            users.forEach(user => {
                const userOption = document.createElement('div');
                userOption.innerText = `Name: ${user.name}, Mobile: ${user.mobileNumber}`;
                userOption.onclick = () => {
                    document.getElementById('worksUnder').value = user._id; // Set the worksUnder field
                    userSelection.remove(); // Close the popup after selection
                };
                userSelection.appendChild(userOption);
            });
            
            document.body.appendChild(userSelection);
        }
    </script>
</body>
</html>
